plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.goormthon'
version = '0.0.1-SNAPSHOT'
description = 'backend'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// --- Spring starters ---
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter'

	// --- DB/Flyway ---
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'com.mysql:mysql-connector-j'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-mysql'
	implementation 'org.flywaydb:flyway-database-postgresql'

	// --- OpenAPI(Swagger) ---
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

	// --- 캐시/Redis ---
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// --- 회복탄력성 ---
	implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.2.0'

	// --- Lombok ---
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	// --- Test ---
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:junit-jupiter:1.20.1'
	testImplementation 'org.testcontainers:postgresql:1.20.1'
	testImplementation 'org.awaitility:awaitility:4.2.1'
	testImplementation 'org.wiremock:wiremock-standalone:3.9.1'
	testImplementation 'io.rest-assured:rest-assured:5.5.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// --- JSON 로깅(Logback) ---
	implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

	// --- 메트릭/프로메테우스 ---
	implementation 'io.micrometer:micrometer-registry-prometheus'

	// --- 트레이싱(OpenTelemetry via Micrometer Tracing) ---
	implementation 'io.micrometer:micrometer-tracing-bridge-otel:1.4.2'
	implementation 'io.opentelemetry:opentelemetry-exporter-otlp:1.43.0'

	// --- Sentry 에러 리포팅 ---
	implementation 'io.sentry:sentry-spring-boot-starter-jakarta:7.13.0'

	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'io.jsonwebtoken:jjwt-api:0.12.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.5'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
	testImplementation 'com.h2database:h2:2.2.224'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client' // OAuth2 로그인
	implementation 'org.springframework.security:spring-security-oauth2-jose'   // (내부에서 사용)

	// Micrometer + OpenTelemetry Bridge (Tracing)
	implementation 'io.micrometer:micrometer-tracing-bridge-otel:1.3.3'
	implementation 'io.opentelemetry:opentelemetry-exporter-otlp:1.45.0'

	// Prometheus Metrics
	implementation 'io.micrometer:micrometer-registry-prometheus:1.13.3'

}

tasks.withType(Test).configureEach {
	useJUnitPlatform()
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	useJUnitPlatform()
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
	}
}
