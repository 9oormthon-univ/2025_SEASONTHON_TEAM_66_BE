name: careroad-dev

services:
  # === PostgreSQL (Primary) ===
  db:
    image: postgres:16
    container_name: careroad-pg
    environment:
      POSTGRES_DB: ${PG_DB-careapp}
      POSTGRES_USER: ${PG_USER-careuser}
      POSTGRES_PASSWORD: ${PG_PASS-carepass}
    ports:
      - "5432:5432"
    volumes:
      - careroad_pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER-careuser} -d ${PG_DB-careapp}"]
      interval: 10s
      timeout: 5s
      retries: 10

  # === DB UI (optional) ===
  adminer:
    image: adminer:4
    container_name: careroad-adminer
    ports:
      - "8082:8080"
    depends_on:
      db:
        condition: service_healthy

  # === Observability: OTEL Collector ===
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.103.1
    container_name: careroad-otel
    command: ["--config=/etc/otelcol/config.yaml"]
    volumes:
      - ./ops/otel-collector-config.yaml:/etc/otelcol/config.yaml:ro
    ports:
      - "4317:4317" # gRPC
      - "4318:4318" # HTTP
    depends_on:
      tempo:
        condition: service_started

  # === Observability: Prometheus ===
  prometheus:
    image: prom/prometheus:v2.55.1
    container_name: careroad-prometheus
    volumes:
      - ./ops/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

  # === Observability: Tempo (traces store) ===
  tempo:
    image: grafana/tempo:2.6.0
    container_name: careroad-tempo
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./ops/tempo.yaml:/etc/tempo.yaml:ro
    ports:
      - "3200:3200"   # Tempo HTTP
      - "4317:4317"   # (optional) direct OTLP gRPC

  # === Observability: Loki (logs) ===
  loki:
    image: grafana/loki:3.1.1
    container_name: careroad-loki
    command: ["-config.file=/etc/loki/local-config.yaml"]
    volumes:
      - ./ops/loki-config.yaml:/etc/loki/local-config.yaml:ro
    ports:
      - "3100:3100"

  # === Observability: Promtail (log shipper) ===
  promtail:
    image: grafana/promtail:3.1.1
    container_name: careroad-promtail
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./ops/promtail-config.yaml:/etc/promtail/config.yml:ro
    command: ["--config.file=/etc/promtail/config.yml"]
    depends_on:
      loki:
        condition: service_started

  # === Observability: Grafana ===
  grafana:
    image: grafana/grafana:11.1.3
    container_name: careroad-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASS-admin}
    depends_on:
      prometheus:
        condition: service_started
      tempo:
        condition: service_started
      loki:
        condition: service_started

  # === Application ===
  app:
    # 멀티스테이지 Dockerfile이 루트에 있다고 가정합니다.
    build:
      context: .
      dockerfile: Dockerfile
    image: careroad-api:latest
    container_name: careroad-api
    ports:
      - "8080:8080"
    environment:
      # App env
      APP_ENV: ${APP_ENV-local}

      # DB 연결 (application.yml 기본값과 동일 / 덮어쓰려면 지정)
      PG_URL: ${PG_URL-jdbc:postgresql://db:5432/careapp}
      PG_USER: ${PG_USER-careuser}
      PG_PASS: ${PG_PASS-carepass}

      # OTEL Export (Micrometer → Collector)
      OTEL_TRACES_SAMPLER_ARG: ${OTEL_TRACES_SAMPLER_ARG-0.2}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT-http://otel-collector:4318}

      # JWT 키 (컨테이너 파일 경로로 지정)
      JWT_PRIVATE_PEM: ${JWT_PRIVATE_PEM-file:/app/config/keys/jwt-private.pem}
      JWT_PUBLIC_PEM:  ${JWT_PUBLIC_PEM-file:/app/config/keys/jwt-public.pem}
      JWT_ISSUER: ${JWT_ISSUER-careroad.dev}
      JWT_KID: ${JWT_KID-dev-key-1}
      JWT_ACCESS_MIN: ${JWT_ACCESS_MIN-15}
      JWT_REFRESH_DAYS: ${JWT_REFRESH_DAYS-14}
    volumes:
      - ./secrets/keys:/app/config/keys:ro
    depends_on:
      db:
        condition: service_healthy
      otel-collector:
        condition: service_started
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/actuator/health/liveness"]
      interval: 10s
      timeout: 3s
      retries: 10

volumes:
  careroad_pgdata:
